=== Fetching and Pulling Content

In part one I emphasized the point that all git repositories are equal.

This section covers how git repositories communicate with each other and manage
their differences.

We have already covered git clone, but let's create a simple git repo and then
clone it:

----
$ rm -rf git_origin git_cloned
$ mkdir git_origin
$ cd git_origin
$ git init
$ echo 'first commit' > file1
$ git add file1
$ git commit -am file1
$ cd ..
$ git clone git_origin git_cloned
----

These two repositories (the folders 'git_origin' and 'git_cloned') now contain
identical content:

----
$ diff git_origin/file1 git_cloned/file1
----

However, their .git/config files differ in instructive ways.

The git_origin folder has this in its .git/config file:

----
$ cat git_origin/.git/config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
----

while the git_cloned folder has this in its .git/config file:

----
$ cat git_cloned/.git/config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = /Users/imiell/gitcourse/git_origin
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
----

While the git_origin has no visibility of any 'remotes', the cloned one does.
It has an origin remote.

Its url is (in this case) pointed at the file. URLs can also be http/https, ssh,
or git.

If I go to the cloned repo and ask it for information about remotes:

----
$ cd git_cloned
$ git remote
origin
----

I get the name 'origin' back.

The name 'origin' is the default name for a remote, but it has no special meaning.
It could be renamed to 'bitbucket', or 'gitlab' for example.

To get more defailed about remotes, run with -v:

----
$ git remote -v
origin	/Users/imiell/gitcourse/git_origin (fetch)
origin	/Users/imiell/gitcourse/git_origin (push)
----

which gives you the information about the URLs you saw in the config file.


==== fetch

The above remotes are divided into "(fetch)" and "(push)" actions. These relate
to two different actions on remotes, ie getting changes from a remote, or pushing
changes to a remote.

These actions can work against different remotes. For example, the output of 
git remote might be:

----
$ git remote -v
origin	/Users/imiell/gitcourse/one_origin (fetch)
origin	/Users/imiell/gitcourse/another_origin (push)
----

but I've never seen an example of this in the wild.

First you look at 'fetch'ing from the remote.

'git fetch' gets the latest changes from the remote repository and copies them
into the local repository.

Crucially, these changes are not 'mixed' with your repository, but are kept in a
separate place.

You can see this if you use the 'git branch -a' command.

First make a change to the origin's repo:

----
$ cd git_origin
$ echo 'fetchable change' >> file1
$ git commit -am fetchable
----

Then go to the cloned repository and fetch the changes on the master branch on
the origin remote (git_origin):

----
$ cd ../git_cloned
$ git fetch origin master
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /Users/imiell/gitcourse/git_origin
 * branch            master     -> FETCH_HEAD
   ceed883..056dd2c  master     -> origin/master
----

What the above output means is that the origin's master has been brought into
this repo's references. This branch is now referred to locally as:
origin/master.

This has not affected the local master branch at all!

----
$ git log
----

You can see this repository's view of all the branches by running a git branch
command with '--all':

----
$ git branch --all
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
----

Here you see the local 'master' branch, followed by the remotes/origin/HEAD
pointer (remember HEAD is a pointer to a location in the repository), which is
linked to remotes/origin/master.

If you want to dig into the internals at this point, you can peek at the .git
folder again:

----
$ ls .git/refs/
heads	remotes	tags
----

which has 'heads' which contains references to local branch:

----
$ cat .git/refs/heads/master
ceed883eec5a797471cd1c62365d9f2899b857c7
----

and similarly for remote branches:

----
$ cat .git/refs/remotes/origin/master 
056dd2ce64da1e746214107b74866c375a85ffc2
----

So you've 'fetch'ed the remote branch and have it locally.

To apply the remote master's changes to the local one you merge it just as you 
would for any other reference:

----
$ git merge origin/master
Updating ceed883..056dd2c
Fast-forward
 file1 | 1 +
 1 file changed, 1 insertion(+)
$ git log 
commit 056dd2ce64da1e746214107b74866c375a85ffc2
Author: Ian Miell <ian.miell@gmail.com>
Date:   Tue Jun 28 18:41:41 2016 +0100

    fetchable

commit ceed883eec5a797471cd1c62365d9f2899b857c7
Author: Ian Miell <ian.miell@gmail.com>
Date:   Tue Jun 28 17:30:44 2016 +0100

    file1
----

==== What you've learned 

You have learned what a 'git pull' actually does.

A 'git pull' does a

- fetch, followed by a
- merge

A pull fetches the mapped branch, and then merges it into the local branch.

In general I prefer that rather than using 'git pull' you do fetch and merge
separately and keep reminding yourself of what's going with respect to 'remotes'
in your git repository. Once you've internalised that workflow, start using
'git pull' as a convenience. If you use 'git pull' too early there is a danger
of seeing it as magical, or at least not feeling entirely sure about what's
going on!

We will cover what your branch locally is mapped to remotely in the next
section, where you will cover remote repository management in more depth.

==== Exercises 

TODO

