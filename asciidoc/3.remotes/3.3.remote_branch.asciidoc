=== Pushing Code

You're familiar now with git branches and remote git repositories.

In this section you're going to familiarise yourself with how branches are
managed between the two, and what goes on in a push.

First, set up a simple origin git repository and clone it, just as you did
before.

//TODO: Do block listings across the book
//.Block Listing 3.3.1
----
$ rm -rf git_origin git_clone
$ mkdir git_origin
$ cd git_origin
$ git init
$ echo 'first commit' > file1
$ git add file1
$ git commit -am file1
$ cd ..
$ git clone git_origin git_clone
----

As it stands you have no branches on either the origin or the clone other than
the default (master):

----
$ cd git_origin
$ git branch -a -v
* master bedca8c file1
$ cd ../git_clone
$ git branch -a -v
* master                bedca8c file1
  remotes/origin/HEAD   -> origin/master
  remotes/origin/master bedca8c file1
$ cd ..
----

Make sure you understand why there are three lines in the second 'git branch'
output! If you don't, start the chapter again!


==== Create branch and push to remote

Now you're going to create a branch on the clone, do some work on it, and then
push it to the remote repository.

This is a common use case, as users may experiment with different branches
locally, then decide they want to share their work with others by pushing it
to a commonly-accessible remote repository, eg on GitHub.

----
$ cd git_clone
$ git checkout -b abranch
$ echo 'cloned abranch commit' >> file1
$ git commit -am 'cloned abranch commit'
$ git push origin abranch:abranch
----

The key bit there was at the end, with the git push command. The colon
separates the local branch name from the branch name you are pushing to on the
remote (which here happen to have the same name).


==== Pushing to branch repositories with different content?

You might be asking yourself at this point: what happens if both repositories
have a branch with different content? 

Let's see! Type this out.

----
$ rm -rf git_origin git_clone
$ mkdir git_origin
$ cd git_origin
$ git init
$ echo 'first commit' > file1
$ git add file1
$ git commit -am file1
$ cd ..
$ git clone git_origin git_clone
$ cd git_clone
$ git checkout -b abranch
$ echo 'cloned abranch commit' >> file1
$ git commit -am 'cloned abranch commit'
$ cd ../git_origin
$ git checkout -b abranch
$ echo 'origin abranch commit' >> file1
$ git commit -am 'origin abranch commit'
$ cd ../git_clone
$ git push origin abranch:abranch
----

The output of the last command will look something like this:

----
To /Users/imiell/tmp/git_origin
 ! [rejected]        abranch -> abranch (fetch first)
error: failed to push some refs to '/Users/imiell/tmp/git_origin'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
----

Read the output carefully. It tells you exactly what's going on. Breaking it
down:

----
Updates were rejected because the remote contains work that you do not have locally.
----

The remote (the origin) has a commit (with the content: 'origin abranch commit')
that you have no record of locally in your branch with the same name.

----
This is usually caused by another repository pushing to the same ref.
----

It's correctly diagnosed the problem as another repository (git_remote)
pushing to the same name on the receiving remote. Finally, it offers some
advice.

----
You may want to first integrate the remote changes (e.g., 'git pull ...') before pushing again.
----

But you know better than to 'git pull'! Do a fetch and merge:

----
$ git fetch origin
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /Users/imiell/tmp/git_origin
 * [new branch]      abranch    -> origin/abranch
----

Now check the branches you have locally:

----
$ git branch -v -a
* abranch                d99581a cloned abranch commit
  master                 9917bcd file1
  remotes/origin/HEAD    -> origin/master
  remotes/origin/abranch f2be4e0 origin abranch commit
  remotes/origin/master  9917bcd file1
----

Observe that the 'remotes/origin/abranch' branch you now have locally
('f2be4e0 origin branch commit') is different from the local 'abranch' branch
('d99581a cloned abranch commit').

To complete your manual pull, merge the remote branch into the local:

****
For bonus points, do a rebase here rather than a merge for a cleaner history!
****

----
$ git merge remotes/origin/abranch
Auto-merging file1
CONFLICT (content): Merge conflict in file1
Automatic merge failed; fix conflicts and then commit the result.
----

Follow the instructions to resolve the conflict and commit the result.


==== The branch exists on the remote, but not locally

It is common to have a branch that exists on a remote repository, but not in
your local repository. Maybe someone else pushed a branch up, or has made
a pull request from a branch in that repository.

Type the following out to simulate that state of affairs:

----
$ rm -rf git_origin git_clone
$ mkdir git_origin
$ cd git_origin
$ git init
$ echo 'first commit' > file1
$ git add file1
$ git commit -am file1
$ cd ..
$ git clone git_origin git_clone
$ cd git_origin
$ git checkout -b abranch
$ echo 'origin abranch commit' >> file1
$ git commit -am 'cloned abranch commit'
$ git branch -a
* abranch
  master
$ cd ../git_clone
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
$ git remote -v
origin	/tmp/git_origin (fetch)
origin	/tmp/git_origin (push)
----

You will observe that the cloned repository has no knowledge of the 'abranch'
branch on the 'origin' repository, even though the 'origin' is known to the
cloned repo. There's no magic about the tracking of a remote repository, you
have to trigger your repository to read the remote's state.

To get the branch into your repository you will need to fetch it.

----
$ git fetch origin
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /Users/imiell/tmp/git_origin
 * [new branch]      abranch    -> origin/abranch
----

Note that you didn't need to specify a branch to get from the origin. By default
it will get all branches that may be of interest.

----
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/abranch
  remotes/origin/master
----

Now your cloned repository has knowledge that a branch called abranch
exists on the origin remote. But there is no branch in your local repository:

----
$ git branch
* master
----

Now if you check out an abranch branch in your local repository, git is smart
enough to match the name and uses this branch to 'track' the remote branch from
the origin:

----
$ git checkout abranch
Branch abranch set up to track remote branch abranch from origin.
Switched to a new branch 'abranch'
$ git branch -a -vv
* abranch                19a1fe0 [origin/abranch] cloned abranch commit
  master                 05d6bd2 [origin/master] file1
  remotes/origin/HEAD    -> origin/master
  remotes/origin/abranch 19a1fe0 cloned abranch commit
  remotes/origin/master  05d6bd2 file1
----

Pay close attention to branch tracking, as it can be very confusing to git
newcomers!

Now if you 'git push' any changes on this branch, git will attempt to push 
those changes to the tracked branch, ie the abranch branch on the remote
repository.


==== Tracking a remote branch with a different name

More rarely, you may want to track a branch on the remote repository that
has a different name. Or, you may want to manually mark the local branch as
tracking a remote one.

In these situations, you might see this kind of error when you push:

----
$ git push 
fatal: The current branch abranch has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin abranch
----

As is often the case, careful reading of the error will tell you what you need
to know. It's just the jargon that can be difficult to follow!

In this case, the error is telling you that your branch is not tracking any
remote branch, so it doesn't know what to push to.

Type in these commands to reproduce this situation:

----
$ rm -rf git_origin git_clone
$ mkdir git_origin
$ cd git_origin
$ git init
$ echo 'first commit' > file1
$ git add file1
$ git commit -am file1
$ cd ..
$ git clone git_origin git_clone
$ cd git_clone
$ git checkout -b abranch
$ echo 'origin abranch commit' >> file1
$ git commit -am 'cloned abranch commit'
$ git push
fatal: The current branch abranch has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin abranch
----

Now, let's have a look at the branches you have locally when you try to push:

----
$ git branch -vv
* abranch 179b22a cloned abranch commit
  master  41ffa8a [origin/master] file1
----

While the master branch is tracking the 'origin/master' branch (ie the master
branch on the origin remote), the branch 'abranch' is not tracking any remote
branch.

At this point you could run either:

----
git push --set-upstream origin abranch
----

or

----
git push -u origin abranch
----

and that would set up the tracking for you while pushing.

Before that though, you're going to type:

----
$ git push origin abranch
Counting objects: 3, done.
Writing objects: 100% (3/3), 273 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To /Users/imiell/tmp/git_origin
 * [new branch]      abranch -> abranch
----

That successfully pushed the change to the remote branch, which was created
as it did not already exist. However, if you re-run the branch command again:

----
$ git branch -vv
* abranch 179b22a cloned abranch commit
  master  41ffa8a [origin/master] file1
----

it is still not tracking the origin's master branch. If you add the 
--set-upstream / -u flag on a push, the branch will track the remote's branch:

----
$ git push -u origin abranch
Branch abranch set up to track remote branch abranch from origin.
Everything up-to-date
$ git branch -vv
* abranch 179b22a [origin/abranch] cloned abranch commit
  master  41ffa8a [origin/master] file1
----

==== What you learned

In this section you added to your knowledge about git commit. You:

- Created a branch and pushed it to a remote branch

- Tried to push to a remote with different content

- How to manage branches from a remote repository locally, and vice versa

- What branch tracking is

- What an upstream repository is

==== Exercises

1) Create a repository on Github

2) Add content to it

3) Clone the repository, create a branch, and push it remotely

4) View the branch on GitHub
