=== Git Bisect

Bisecting is a very powerful tool for finding bugs.

Let's say you have a set of changes on a master branch:

image::diagrams/2.6.1.mermaid.png[]

You discover a previously-unseen bug at point A100 and want to debug it. One way
to do this is to read over the code, add logging etc.. This can be
time-consuming, and there is another simpler way to gather information about
what change caused the bug.

Git bisect is a very useful tool for finding out where a bug was introduced.
If you know where a bug was introduced, you can look at the diff of the commit
that caused it and 

It works by picking a start point where the bug definitely did not exist (the
'good' point). In this case you'll choose point A1. Then you pick a point where
the bug definitely did exist (the 'bad' point). In this case, that's A100.

image::diagrams/2.6.2.mermaid.png[]

Once the git bisect session has that information, it can hand you a version
at the hafway point between the 'good' and 'bad' points and asks you to run 
whatever you need to run to determine whether it's good or bad. If you tell it
it's 'good' it will mark all version at that point and before as 'good'. 

image::diagrams/2.6.3.mermaid.png[]

It then repeats the process, giving you a version at the halfway point between
'good' and 'bad', asking you for its status. In this sequence, you are given
A75:

image::diagrams/2.6.4.mermaid.png[]

If you determine that this version was 'bad', then all the versions after it are
marked as bad:

image::diagrams/2.6.5.mermaid.png[]

This binary search process repeats until you know which versions were good
and bad. One outcome might be:

image::diagrams/2.6.6.mermaid.png[]

Once you know that the first 'bad' commit was A63, you can examine the difference
between A62 and A63, and this gives you a clue.

==== A 'real' git bisect session

Let's make this more realistic with an actual git bisect session.

What you're going to do is create a git repo with one file (projectfile). In
this file you are going to add a line for each commit. The first line will
be 1, the second 2, and so on until the hundredth commit which adds the line
'100'.

In this scenario the 'bug' is the line '63', but you don't know that yet. All
you know is that you can tell if the bug is in the code with the shell script:

----
rm -rf git-bisect && mkdir -p git-bisect && cd git-bisect
git init
touch projectfile
git add projectfile
for ((i=1;i<=100;i++)); do echo $i >> projectfile; git commit -am "A$i"; done
git log
git bisect start
git bisect bad
git status
git checkout HEAD~99   # Check out the first checkout
git log
git status
git bisect good
git log                # Now at A50
git status
git bisect good        
git log                # Now at A75
git bisect bad         
git log                # Now at A62
git bisect good        
git log                # Now at A68
git bisect bad         
git log                # Now at A65
git bisect bad        
git log                # Now at A64
git bisect bad         
git log                # Now at A63
git bisect bad
# 79583459dc6061bd91d55cfcf8c34fae845f836b is the first bad commit
# commit 79583459dc6061bd91d55cfcf8c34fae845f836b
# Author: Ian Miell <ian.miell@gmail.com>
# Date:   Sun Jul 10 11:53:47 2016 +0100
# 
#     A63
# 
# :100644 100644 aea6bd8ad6845cca3804a87230fee1b69651643d 55200b3d5d7c0e515eaccaf8465a295017e88249 M	projectfile
----

The bisect is complete, and has reported 79583459dc6061bd91d55cfcf8c34fae845f836b as the first bad commit (this may differ for you).

You can get the diff between this commit and its parent by using the '^' operator with diff:

----
git diff 79583459dc6061bd91d55cfcf8c34fae845f836b^ 79583459dc6061bd91d55cfcf8c34fae845f836b
# diff --git a/projectfile b/projectfile
# index aea6bd8..55200b3 100644
# --- a/projectfile
# +++ b/projectfile
# @@ -60,3 +60,4 @@
#  60
#  61
#  62
# +63
----


==== What you learned

- How to bisect a git repo
