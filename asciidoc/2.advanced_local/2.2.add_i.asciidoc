=== Git add interactive

Previously you've learned about the four stages of working in Git:

image::diagrams/1.1.3.mermaid.png[scaledwidth="50%",height=200]

So far you've shown a difference between adding (staging) and committing, but
this still causes confusion for people - what's the point of this?

Let's demonstrate how you might want to use this with a simple example:

----
$ mkdir 2.2.1
$ cd 2.2.1
$ git init
$ echo 'This is file1' > file1
$ echo 'This is file2' > file2
$ git add file1 file2
$ git commit -am 'files added'
$ cat > file1 << END
Good change
This is file1
Experimental change
END
$ cat > file2 << END
All good
This is file2
END
----

----
$ git add -i
----

Then tap in:

----
p
1

s
y
n
q
----

Now run:

----
$ git add -i
           staged     unstaged path
  1:    unchanged        +2/-0 file1

*** Commands ***
  1: status	  2: update	  3: revert	  4: add untracked
  5: patch	  6: diff	  7: quit	  8: help
What now> p
           staged     unstaged path
  1:    unchanged        +2/-0 file1
Patch update>> 1
           staged     unstaged path
* 1:    unchanged        +2/-0 file1
Patch update>>
diff --git a/file1 b/file1
index 6a00e12..014f6e4 100644
--- a/file1
+++ b/file1
@@ -1 +1,3 @@
+Good change
 This is file 1
+Experimental change
Stage this hunk [y,n,q,a,d,/,s,e,?]? s
Split into 2 hunks.
@@ -1 +1,2 @@
+Good change
 This is file 1
Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]? y
@@ -1 +2,2 @@
 This is file 1
+Experimental change
Stage this hunk [y,n,q,a,d,/,K,g,e,?]? n

*** Commands ***
  1: status	  2: update	  3: revert	  4: add untracked
  5: patch	  6: diff	  7: quit	  8: help
What now> q
Bye.
$ git status # There are both staged and unstaged changes
$ git diff   # One change has been added (but not committed), and the other is still a change only in section 1
----

Now you have staged the good change, but not lost the other changes you have
made. This gives you more granular control over the changes committed.

If you are happy with the changes you can go ahead and commit all the changes
you have made.

NOTE: Committing will still commit all the changes you have made.
What is the point of staging then? It is to confirm that you want to commit some
changes made locally, but not others.

These changes are added to the 'index' (as opposed to the repository).
Remember:   index==staging==adding
Committing: goes to the repository, which can then be pushed to remote
            repositories



==== What you learned

- Difference between staging and committing
- Why the distinction exists
- How to stage specific 'hunks' of code to the index


