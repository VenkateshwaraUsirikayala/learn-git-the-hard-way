=== Reflog

In this section we're going to look at the reflog.

The reflog gives you references to a sequential history of what you have done to
the repo. This can come in very handy when you play with your local repo's
history, as you will see here.

First set up a repo with two commits:

----
$ rm -rf 2.3.1
$ mkdir 2.3.1
$ cd 2.3.1
$ git init
$ echo first commit > file1
$ git add file1
$ git commit -am file1
$ echo second commit >> file1
$ git commit -am file1.1
$ git log
----

Then do some magic to effectively remove the last commit:

----
$ git checkout HEAD^    # Use the caret character as a parent
$ git branch -f master
$ git checkout master
$ git log
----

NOTE: don't worry about what you just did - it's a more advanced set of commands
that mess with git's history.

The last commit has disappeared! You have fully reverted the master branch
to where it was before.

Don't worry about what you did there, the point here is: what you do if you get
ourselves into a mess, and what do you do to get out of it?

This is where git reflog can help.

Git reflog records all _movements_ of branches in the repo. Like stashes, it is
local to your repo.

----
$ git reflog
66cdcd2 HEAD@{0}: checkout: moving from 66cdcd23c5c005edecd7cd7b162d7b42b7a02ab4 to master
66cdcd2 HEAD@{1}: checkout: moving from master to HEAD^
40e99f7 HEAD@{2}: commit: file1.1
66cdcd2 HEAD@{3}: commit (initial): file1
----

Git reflog is a history of the changes made to the HEAD (remember the head is a
pointer to the current location of the repository).

If you 'reset --hard' the repository to the reference given:

----
$ git reset --hard 40e99f7
HEAD is now at 40e99f7 file1.1
$ git log
----

you are returned to where you were.

The --hard updates both the index (staging/added) and the working tree, as you 
saw previously.

The refog contains refernces to the state of the repository at various points
even if those points are no longer apparently reachable within the repo.



==== What you have learned

- git reflog
- git reset (--mixed)
- git reset --hard
