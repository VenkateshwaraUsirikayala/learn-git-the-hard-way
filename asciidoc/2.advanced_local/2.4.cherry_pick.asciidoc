=== Cherry Picking

Next we look at 'cherry-picking'.

Since every commit in git is a change set with a reference id, you can easily
port changes from one branch to another.

To demonstrate this, create a simple repository with two changes:

----
$ rm -rf 2.4.1
$ mkdir 2.4.1
$ cd 2.4.1
$ git init
$ echo change1 > file1
$ git add file1
$ git commit -am change1
$ echo change2 >> file1
$ git commit -am change2
$ git log
----

At this point you branch off into two branches, master and experimental.

----
$ git branch experimental
$ git checkout experimental
$ ex -sc '1i|crazy change' -cx file1  # Magic to insert before the first line
$ cat file1
$ git commit -am crazy
$ echo more sensible change >> file1
$ cat file1
$ git commit -am sensible
----

You decide that the sensible change is the one you want to keep.

First get the reference id with a git log:

----
$ git log
----

then checkout the master and run a cherry-pick command:

----
$ git checkout master
$ git cherry-pick ID
$ git log
----

****
NOTE: while researching this I came across complex scenarios where the diff
was not easily applied (hence the insertion of the 'crazy change' at the top).
****

Sometimes the cherry-pick might fail because the diff cannot easily be applied,
as in this case:

----
$ rm -rf 2.4.3
$ mkdir 2.4.3
$ cd 2.4.3
$ git init
$ echo change1 > file1
$ git add file1
$ git commit -am change1
$ echo change2 >> file1
$ git commit -am change2
$ git log
$ git branch experimental
$ git checkout experimental
$ echo crazy change >> file1
$ cat file1
$ git commit -am crazy
$ echo more sensible change >> file1
$ cat file1
$ git commit -am sensible
$ git log
$ git checkout master
$ git cherry-pick ID
----

When cherry-picking you will get a message like this:

----
error: could not apply 743d18e... sensible
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add <paths>' or 'git rm <paths>'
hint: and commit the result with 'git commit'
----

in which case you need to follow the instructions above.

As ever, a git status helps you see what's going on.

----
$ git status
On branch master
You are currently cherry-picking commit 743d18e.
  (fix conflicts and run "git cherry-pick --continue")
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

	both modified:   file1

no changes added to commit (use "git add" and/or "git commit -a")
----


Cherry-picking is often a simple and easy to follow way to move changes between
different branches, which can be very useful.

==== Cleanup

To clean up, run:

----
$ cd ..
$ rm -rf 2.4.1
$ rm -rf 2.4.3
----


==== What you learned

- what git cherry pick does
