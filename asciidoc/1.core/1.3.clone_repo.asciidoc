<<<
=== Cloning a Repository

This section covers:

- git clone
- git reset

Git clone is the way you create copies of git copies to work on.

Git reset is a way of returning to a previous or known state. As you play with
git and learn it you will (and should!) often make mistakes in your local
repositories. In these situations many users remove the entire repo and
re-clone when often all that's needed is a hard reset.

==== Clone

In this section you're going to play with the contents of your repository by
deleting the content and seeing what your options are to recover from the
repository.

----
$ rm -rf 1.3.1
$ mkdir -p 1.3.1
$ cd 1.3.1
$ git clone https://github.com/ianmiell/shutit
$ cd shutit
$ ls .git
----

****
NOTE: If you have problems cloning from GitHub, you can replace the clone with
any URL that you can access from within your network. Otherwise, check your
proxy settings.
****

There's .git, just as before. Remember that:

****
ALL GIT REPOSITORIES ARE BORN EQUAL! 
****

This is a git repo just the same as the one you've cloned, and you own it. Its
only connection with the repo you cloned from is seen if you run 

----
$ tail -3 .git/config
[remote "origin"]
	url = git@github.com:ianmiell/shutit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

You will see a new section that indicates where this git repo was cloned from,
and gives that 'remote' a name by default: 'origin'.

This is a sneak preview of what we will cover in part 3.


==== Accidental Deletion

Recall again the 4 stages of data in a git repo:

image::diagrams/1.1.3.mermaid.png[scaledwidth="50%",height=200]

Run these commands, in which you will make a disastrous 'mistake':

----
$ git log                           # default history of this repo
$ git log --oneline                 # more concise history of this repo
$ git log --oneline --graph         # graphical view of the history of this repo
$ cd ..                             # exit this repo's root folder
$ git clone shutit cloned_shutit    # clone the repository
$ cd cloned_shutit                  # enter the repository
$ ls .git                           # you have a copy of the repository's history
$ rm -rf *                          # delete all the files!
$ ls .git                           # The .git folder is still there
----

You have cloned the repository, and 'accidentally' deleted all the files under
git's control. What to do?

One option often used is to re-clone, but there is another way.

==== git reset

You can use 'git reset' to recover the state of the git repository in various
ways.

By default, git will recover whatever has been added to the index/staging area
and place it in your working directory.

By contrast a 'git reset --hard' will blitz all local and added changes,
reverting your checkout to a just-cloned state.

----
$ git status        # reports that you have deleted files in working tree/directory
$ git add .         # added to staging/index area
$ git status        # reports that . Note there's a helpful message about resetting now! Let's explore that.
$ git reset --mixed # --mixed is the default. out of staging/index area, but still deleted in the working directory!
$ git status        # you are back to 'deleted in the working directory' with a message about being ready to add
$ rm -rf *          # delete all the files again
$ git add .         # added to staging/index area ready to commit again
$ git reset --hard  # does a re-check out of the whole repository, discarding working directory and changes to the index
$ git status        # you now have a consistent state between 1 (local changes) and 3 (committed)
$ cd ../..          # revert to original directory
$ rm -rf 1.3.1      # remove temp folder
----


==== What You Learned

- git clone
- git reset


==== Exercises

1) Check out a git repo from either your company repository or github

2) Browse the git log for that repo

3) Look at the man page for git log and explore the options. Don't worry about
understanding everything in there, but play with the options and try to work out
what is going on.
