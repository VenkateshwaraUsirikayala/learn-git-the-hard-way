=== Merging

You've already covered basic branching in previous sections. As you will recall,
branching gives you the ability to work on parallel streams of development in
the same codebase.

image::diagrams/1.5.1.mermaid.png[]

In a sense, merging is the opposite of branching. When you merge, you take two
separate points in your development tree and fuse them together.

It's important to understand merging as it's a routine job of a repository
maintainer to merge branches together.

In the above diagram, the repository is positioned at the tip of master (G).You 
know this because the HEAD is pointed at it.

If you merge the experimental branch into master with a 'git merge experimental',
you end up with a tree that looks like this:

image::diagrams/1.5.2.mermaid.png[]

A new change has been made (I). This change merges together the changes made on
experimental with the changes made on master.

You can run through the above scenario step-by-step by following these commands:

----
$ rm -rf 1.5.1
$ mkdir -p 1.5.1
$ cd 1.5.1
$ git init
$ echo A > file1
$ git add file1
$ git commit -am 'A'
$ echo B >> file1
$ git commit -am 'B'
$ echo C >> file1
$ git commit -am 'C'
----

Now you are at this point:

image::diagrams/1.5.3.mermaid.png[]

you can branch to experimental and make your changes:

----
$ git branch experimental
$ git checkout experimental
$ git branch
$ echo E >> file1
$ git commit -am 'E'
$ echo H >> file1
$ git commit -am 'H'
----

and the repository is now in this state:

image::diagrams/1.5.4.mermaid.png[]

Return to master and make changes D, F and G:

----
$ git checkout master
$ git branch
$ echo D >> file1
$ git commit -am 'D'
$ echo F >> file1
$ git commit -am 'F'
$ echo G >> file1
$ git commit -am 'G'
----

image::diagrams/1.5.5.mermaid.png[]

and you are ready to merge!

----
$ git merge experimental
Auto-merging file1
CONFLICT (content): Merge conflict in file1
Automatic merge failed; fix conflicts and then commit the result.
----

Oh dear, that does not look good. The merge failed with a CONFLICT.

==== What's going on?

So what exactly happens when you perform a merge? 

When you run a merge, git looks at the branch you are on (here it is master),
and the branch you are merging in, and works out what the first common ancestor
is. In this case, it's point C, as that's where you branched experimental.

It then takes the changes on the branch you are merging in from that point
and applies them to the branch you are on in one go.

These changes create a new commit, and the git log graph shows the branches
joined back up.

Sometimes though, the changes made on the branches conflict with one another.
In this case, the D, F and G of the master changed the same lines as the E and
H of experimental.

Git doesn't know what to do with these lines. Should it put the E and H in 
instead of the D, F and G, or put them all in? If it should put them all in,
then what order should they go in?

Changing lines around the same area in code can have disastrous effects, so
git does not make a decision when this happens. Instead it tells you that there
was a conflict, and asks you to 'fix conflicts and then commit the result'.

If you look at file1 now:

----
A
B
C
<<<<<<< HEAD
D
F
G
=======
E
H
>>>>>>> experimental
----

all the lines from both branches are in the file. There are three sections here.
The file up to line C is untouched, as there was no conflict. Then we see a
line with arrows indicating the start of a conflicting section, followed by 
the point in the repo that those changes were made on (in this case, HEAD)
'<<<<<<< HEAD'. Then a line of just equals signs indicates the end of a
conflicting set of changes, followed by the changes on the other conflicting
branch (the E and H on experimental).

What you choose to do here is up to you as maintainers of this repository. You
could add or remove lines as you wish until you were happy the merge has been 
completed. At that point you can commit your change, and the merge has taken
place.

You could even leave the file as is (including the '<<<<<<<','=======', and
'>>>>>>>' lines, though this is unlikely to be what you want! It's surprising
how easily you can forget to resolve all the conflicting sections in your
codebase when doing a merge.

When you are done you can commit the change, and view the history with
the git log command.

----
$ git commit -am 'merged experimental in'
$ git log --all --oneline --graph --decorate
*   69441b0 (HEAD, master) merged
|\  
| * b3d54fe (experimental) H
| * 4a013db E
* | d9d3722 G
* | bf0fc3e F
* | ccedaee D
|/  
* 8835191 C
* f9e5b4f B
* 38471fe A
----

Reading this from bottom to top, you can read commit C and commit H as being
merged into the HEAD of master.

NOTE: git prefers to show the history from most recent to oldest, which is
the opposite of the diagrams in this section. The git man pages like to show
time from left to right, like this:

                             A'--B'--C' topic
                            /
               D---E---F---G master

If you think this is confusing, I won't disagree. However, for git log it makes
some sense: if you are looking at a repository with a long history, you are more
likely to be interested in recent changes than older ones.

==== What you learned

- What a merge is
- What a merge conflict is
- How to resolve a merge conflict
- How to read a merged log history

==== Exercises

1) Initialise a repository, commit a file, make changes on two branches and
merge

2) Read over git merge's man page, and research what you don't understand

3) Create a merge knowing there will be a conflict and understand what you
need to do to resolve
