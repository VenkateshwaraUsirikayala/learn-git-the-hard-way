=== Git basics

This section covers:

- git init
- the .git folder
- git log
- git status
- git add
- git commit
- git diff

This section is important because these are the basic tools you will most often
use with git.

To initialise a git repository, run 'git init' from within the root folder
of the source you want to manage.

----
$ rm -rf 1.2.1
$ mkdir 1.2.1
$ cd 1.2.1
$ git init
----

This initialises a database in the folder '.git' locally.
Your repository is entirely stored within this .git folder. There are no
other files elsewhere on your filesystem you need to be concerned about to work
with this repository.
(There are config files for git, but these are global to the host. You can
ignore them for now.)

----
$ cd .git
$ ls
config
description
HEAD
hooks
info
objects
refs
$ cd ..
----

It's not part of the scope of this course to go into detail about the git
internals files seen here.

What is worth being aware of here are:

- the 'HEAD' file
- config

==== HEAD

The HEAD is key - it points to the current branch you are 'on'.

If you look at the file, you will see it points to the refs/heads/master.

This is an internal representation of the default 'master' branch. Let's have
a look at that file.

----
$ cat HEAD
ref: refs/heads/master
----

The file is a link to the 'refs/heads/master' file (which is the default branch
assumed by git).

==== config

'config' stores information about your repository's local configuration, eg
what branches and remote repositories your repository is aware of. It's a plain
text file:

----
$ cat config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
----

Again, don't be concerned with understanding what it all means. Just be aware
of its existence.

==== git log

If you want to look at the history of this repository, run the git log command:

----
$ cd ..
$ git log
fatal: bad default revision 'HEAD'
----

You have a problem! This repository has no history to look at.

Git has followed the 'HEAD' pointer to the refs/heads/master entry and found
nothing there! And indeed there is nothing there:

----
$ ls .git/refs/heads/master
ls: .git/refs/heads/master: No such file or directory
----

You need to create a history for 'git log' to return something useful.

==== git status

As is often the case, git status is your friend:

----
$ git status
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)
----

Remember this command! 'git status' has got me out of many a sticky situation
with git by telling me what is going on, and even advising me on what to do
next.

Here it's telling you where the HEAD is pointed at (the non-existent master
branch), and that there is 'nothing to commit'.

Create a file and check status again:

----
$ touch mycode.py
$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	mycode.c
----

You are now advised that you have an 'untracked' file. Git has detected that it
exists but the repository is not 'aware' of it.

Make git aware of it by adding it to the repository.

==== git add

The add command tells git to start tracking files to the local index.

----
$ git add mycode.py
$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   mycode.py
----

You have added a file to the index ready to be committed to the repository.

Remember the four stages you talked about before:

image::diagrams/1.1.3.mermaid.png[scaledwidth="50%",height=200]

You create your file ((1) local changes), then added/staged it to the index ((2)
add to stage area) and then committed to the local repository.

Still you have no history! Git has simply been made aware of the file, and you
must make a commit to initiate git's history.

----
$ git log
fatal: bad default revision 'HEAD'
----

So you need to commit it to the repository to get a history.

==== git commit

The git commit command tells git to take a snapshot of all added contents at
this point.

----
$ git commit
$ git log
commit e5fb099e952e8754b54f9b99be93d62e3fce0fca
Author: ianmiell <ian.miell@gmail.com>
Date:   Tue Apr 26 07:46:58 2016 +0100

    Some message
----

****
NOTE: The 'git commit' will bring up your shell's configured editor (in the
EDITOR environment variable) to save a file that contains the commit message
for git to store. If you are confused at that point, you may want to look up
shell EDITOR settings. cf http://askubuntu.com/questions/432524/how-do-i-find-and-set-my-editor-environment-variable
****

Now that git is aware of this file you can make a change to the mycode.py file
and show how the local change looks using git diff.

==== git diff

----
$ vi mycode.py
$ git diff
----

Again, you can see what's going on by looking at the status. You can commit
changes to files and add at the same time by doing 'commit -a'

----
$ git status
$ git commit -a
$ git status
----

git log now shows the history of the file:

----
$ git log
----


==== What you learned

- git init
- the .git folder
- HEAD - a pointer to where in the history you are
- git log
- git status
- git add
- git commit
- git diff


==== Exercises

1) Create a git repo

2) Add and commit a file to the repo

3) Commit a few more changes, and then run git log to view the history
