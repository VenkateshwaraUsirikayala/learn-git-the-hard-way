=== Git branching

In this section you will learn about:

- git branch
- git checkout

In the next section of code we will create a git repository with a single file.
This file will have separate changes made on two branches - master and
newfeature.

----
$ rm -rf 1.4.1
$ mkdir 1.4.1
$ cd 1.4.1
$ git init
$ echo newfile > file1
$ git add file1
$ git commit -am 'new file1'
$ git status
$ git branch newfeature                      # Create the 'newfeature' branch
$ git status                                 # You are still on the master branch!
$ git branch                                 # git branch shows the branches in your repository
$ echo Line_master1 >> file1                 # add Line_master1
$ git commit -am 'master change'             # add, commit and message
$ git log --decorate --graph --oneline       # graphical view of this branch
$ git log --decorate --graph --oneline --all # graphical view of all branches
$ git checkout newfeature                    # Check out the newfeature branch
$ cat file1                                  # This has been checked out at the 'branch point'
$ echo Line_feature1 >> file1                # add Line_feature1
$ git commit -am 'feature change'            # add, commit and message
$ git log --decorate --graph --oneline --all # graphical view of all branches
$ git checkout master                        # checkout the master branch
$ cat file1                                  # The feature change is not there
----

This is the final state of the commit tree.

image::diagrams/1.4.1.mermaid.png[]

which reflects the output of the last 'git log' command.

Note that the HEAD (and branch) moves forward with each commit.

The head is where git is pointed at right now, the branch is where that branch
reference is pointed to.

HEAD can be moved to an arbitrary point (git checkout does this)

----
$ git log
$ git checkout
$ git status
----

TODO: more here

Detached head means you are not associated with a branch. 

It 'feels wrong' to be on a detached head because you have no pointer to a
branch to reference.

SO:
A 'branch' is just a pointer on a line of changes
HEAD is just your 'current' branch

It's worth also pointing out here that apart from its default status, there is
nothing special about the 'master' branch. It's just a name. Your principal
branch might be called 'live', 'alice', 'pristine', or whatever you like.

==== What about tags?

We can cover off tags real quick while we're here.

Tags are the same as branches except they have no history. They point to a
particular commit, and that's it!

You can tag something where you are:

----
$ git tag iwozere
----

or you can tag wherever a branch is right now in your checkout:

----
$ git tag remember_to_tell_bob_to_rewrite_this bobs_branch
----


==== What you learned

- git branch
- git checkout
- Detached head
- git log decoration

==== Exercises

TODO
