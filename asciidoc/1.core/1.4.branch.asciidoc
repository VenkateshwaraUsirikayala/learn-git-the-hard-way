=== Git branching

In this section you will learn about:

- git branch
- git checkout

In the next section of code we will create a git repository with a single file.
This file will have separate changes made on two branches - master and
newfeature.

----
$ rm -rf 1.4.1
$ mkdir 1.4.1
$ cd 1.4.1
$ git init
$ echo newfile > file1
$ git add file1
$ git commit -am 'new file1'
$ git status
$ git branch newfeature                      # Create the 'newfeature' branch
$ git status                                 # You are still on the master branch!
$ git branch                                 # git branch shows the branches in your repository
$ echo Line_master1 >> file1                 # add Line_master1
$ git commit -am 'master change'             # add, commit and message
$ git log --decorate --graph --oneline       # graphical view of this branch
$ git log --decorate --graph --oneline --all # graphical view of all branches
$ git checkout newfeature                    # Check out the newfeature branch
$ cat file1                                  # This has been checked out at the 'branch point'
$ echo Line_feature1 >> file1                # add Line_feature1
$ git commit -am 'feature change'            # add, commit and message
$ git log --decorate --graph --oneline --all # graphical view of all branches
$ git checkout master                        # checkout the master branch
$ cat file1                                  # The feature change is not there
----

This is the final state of the commit tree.

image::diagrams/1.4.1.mermaid.png[]

which reflects the output of the last 'git log' command.

Note that the HEAD (and branch) moves forward with each commit.

The head is where git is pointed at right now, the branch is where that branch
reference is pointed to.

===== Detached Heads

Sometimes when using git you might have seen this:

----
$ git status
HEAD detached at 76d43b6
----

The idea of 'detached heads' sounds scary, and often is to people. But it
needn't be!

The HEAD pointer can be moved to an arbitrary point (git checkout does this).

The next set of commands will check out the repository this 

----
$ mkdir lgthw
$ cd lgthw
$ git clone https://github.com/ianmiell/learn-git-the-hard-way.git
$ git log 
$ git checkout 76d43b6b66f295c0a6c8fc738a3487cd31aea136 
Note: checking out '76d43b6b66f295c0a6c8fc738a3487cd31aea136'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 76d43b6... latest
$ git status
HEAD detached at 76d43b6
nothing to commit, working directory clean
$ cd -
$ rm -rf lgthw
----

'HEAD detached' means you are in a position associated with a branch. 

It 'feels wrong' to be on a detached head because you have no pointer to a
branch to reference.

===== A branch is just a pointer!

Remember these points:

- A 'branch' is just a pointer on a line of changes.

- HEAD is just 'where you are right now'.

- 'Detached head' means you are at a commit that has no branch associated with it


==== What about tags?

We can cover off tags real quick while we're here.

Tags are the same as branches except they have no history. They point to a
particular commit, and that's it!

You can tag something where you are:

----
$ git tag iwozere
----

or you can tag wherever a branch is right now in your checkout:

----
$ git tag remember_to_tell_bob_to_rewrite_this bobs_branch
----

===== The 'master' branch

It's worth also pointing out here that apart from its default status, there is
nothing special about the 'master' branch. It's just a name. Your principal
branch might be called 'live', 'alice', 'pristine', or whatever you like.

==== What you learned

- git branch
- git checkout
- Detached head
- git log decoration

==== Exercises

TODO
