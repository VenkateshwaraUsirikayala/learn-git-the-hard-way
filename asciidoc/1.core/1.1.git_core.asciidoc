=== Introduction 

This section covers:

- source control
- git vs trad SCs
- the four phases of the git lifecycle
- benefits of git
- git config

If you're not familiar with source control, it solves a simple problem: how do
you keep track of changes in your codebase? You might start by sending each
other updated files, or email people when files change, or keeping tar files
in a central location with version numbers. However, whenever the project
scales in size, you encounter problems:

- If more developers are involved, there is a communication overhead to track all the changes
- If there are more projects running concurrently on the same codebase, then tracking what is changing what will get complicated
- If multiple developers are working on the same files at the same time, something needs to co-ordinate the changes

A source control tool is a system that helps manage that complexity.

It's a database of files and the histories of their states. Like a database, you
have to learn the skills necessary to work on it before you feel the benefit.

I'm old enough to remember a time when people complained about using source
control at all! These days, using source control for projects is a

Before git existed, there were what I call 'traditional' source control tools.

Traditional source control tools (such as CVS and SVN) had a centralised
architecture. You communicated with a server which maintained the state of the
source. This could mean several things:

- The source control database could get very big
- The history could get very messy
- Managing your 'checkouts' of code could get complicated and painful

In the old world, if you checked out source code, that was a copy of some code
that was 'inferior' in status to the centralised version.

As far as the user was concerned, code was in one of two states:

- Local changes ('dirty')
- Committed == pushed to server

My local changes could not be shared with anyone else until I committed and
pushed them to the server.

Git, by contrast, is fundamentally distributed. Each git 'repository' is a full
copy of each other git repositories. All code databases are known as
'repositories'.

Now remember this, because I'll be repeating it often:

ALL GIT REPOSITORIES ARE BORN EQUAL!

Git was created so people could work on the Linux kernel across the
globe, and offline. So there is no concept of a central server that holds the
golden source. Instead people maintain their own source code database and
reconcile, copy from and integrate with others'.

As Linus Torvalds likes to joke that he's made the Internet his back up system.

==== The Four Phases of Git Content

In the git world you have four phases your code can go through:

image::diagrams/1.1.3.mermaid.png[scaledwidth="50%",height=200]

Understanding these 4 stages are key to understanding git.

If this seems over-complicated now, it won't as you grow to know and love git.
If you've ever been confused by git, it's likely because these stages were
not understood properly. You can get by with git without knowing too much about
how it works, but you will hit limits in your understanding as you want to do 
more with it.

==== Branches

In case you've not looked at a SC tool before, a branch is a core concept.

A series of changes to a repository might look like this:

image::diagrams/1.1.1.mermaid.png[]

Change A is made, then B, then C. This might be informally called the
'main line'.

But let's say someone wants to make an experimental change but not affect
the 'main line'. Then they might 'branch' the code at point C:

image::diagrams/1.1.2.mermaid.png[]

That way users can choose to get a view of the source on the 'main line' branch
or the 'experimental' one.

That's all a branch is: a set of changes from a specific point in time.


==== But What About GitHub?

Earlier I said that:

ALL GIT REPOSITORIES ARE BORN EQUAL!

In practice, some repositories are more equal than others (eg GitHub). This is
a matter of convention.

Most people use GitHub as their reference repository, but I could use a GitHub
repo as a secondary repo for my workflow - it's up to me (indeed I do this for
some of my private repos).

GitHub's de facto status as a centralised repository (and all the machinery that
assumes its existence and continuous uptime) is the reason every GitHub
outage causes a flurry of smart-alec comments about git being decentralised.

Being a distributed system makes Git more challenging to understand than 
traditional SCM tools.

Keeping your local repo sync'd with others is one of the challenges of git, but
the first step to mastering git is understanding this equality of repos.

==== Other differences with git vs traditional VCSes

- History is more malleable.

You can change the history in your own copy of the repo and others' (if you have
the appropriate permission to).

- Branching is cheap

In CVS it's very slow to branch a (O(n) to number of files).
In git it's an O(1) step.
This makes experimentation much easier.
Branch deletion is a common and cheap operation.

- Commits are across the whole poject

In contrast to other source control tools, changes are made across the whole
project, not per file. So moving files involves no loss of history for that
file.

- No version numbers

Git does not automatically number versions of files/changes. It instead assigns
a hash (effectively random) to the change.

- File renaming

You can rename files in git and the content will be tracked. This is a massive
win compared to CVS.



==== Assumptions

At this point I assume you have git installed, and that you have set your
details up as per the below. Replace with your email address and username:

----
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"
----

==== What you learned

- setting up git
- what git is - the four stages
- differences to other SC systems

==== Exercises

1) Install git and set up your config. Set up user.email and user.name using the --global flag.

2) Find out where the config is stored.

3) Research the other config items that are in the file and some of those that are not.
