1.3.3 explain better
graph --all is twice, but first time it's the same
git checkout 'master@ {2 weeks ago}'
pp67 commit -am 'WRONG WORD base commit' + elsewhere
pp68 alicelib != 3.4.1
git -A?
git submodules not explained well - be clearer about branch vs detached heads - the latter happens with recursive checkout

submodules:

$/my/repo/ git submodule add <remote repo URI> <local dest/path>
As noted yesterday when you first clone a repository containing submodules (using `--recursive` flag) the submodules are checked out on detached heads, not branches. I usually run the command
$ git submodule foreach 'git checkout master'
whenever I clone a repository containing submodules for the first time, so that the submodules are checked out on their main branches. I don't know whether you think this is necessary - I suppose if you are not going to, or are not permitted to, make changes in the submodules in a repository, then it doesn't matter.
I think the `git submodule foreach '<submodule command>' is a useful command to run one or more operations on all the submodules in a repository. I use this a lot of keep submodules in local repositories up-to-date with their remotes, e.g.
git submodule foreach 'git pull origin master'
If you have multiple operations to perform then you can use an `&&` option to separate the subcommands, e.g.
git submodule foreach 'git checkout master && git pull origin master'
Finally, I note that running `git submodule` displays the same information as `git submodule status`, namely the list of submodules in a repository along with their HEAD states and local repository paths. There doesn't seem to be any difference in the output compared with running `git submodule status`.
